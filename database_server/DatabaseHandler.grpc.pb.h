// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DatabaseHandler.proto
#ifndef GRPC_DatabaseHandler_2eproto__INCLUDED
#define GRPC_DatabaseHandler_2eproto__INCLUDED

#include "DatabaseHandler.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class Database final {
 public:
  static constexpr char const* service_full_name() {
    return "Database";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Define your RPC methods here.
    virtual ::grpc::Status InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::InsertUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InsertUserResponse>> AsyncInsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InsertUserResponse>>(AsyncInsertUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InsertUserResponse>> PrepareAsyncInsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::InsertUserResponse>>(PrepareAsyncInsertUserRaw(context, request, cq));
    }
    virtual ::grpc::Status UserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::UserExistsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserExistsResponse>> AsyncUserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserExistsResponse>>(AsyncUserExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserExistsResponse>> PrepareAsyncUserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::UserExistsResponse>>(PrepareAsyncUserExistsRaw(context, request, cq));
    }
    virtual ::grpc::Status StoreMessage(::grpc::ClientContext* context, const ::Message& request, ::StoreMessageResponce* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StoreMessageResponce>> AsyncStoreMessage(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StoreMessageResponce>>(AsyncStoreMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StoreMessageResponce>> PrepareAsyncStoreMessage(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::StoreMessageResponce>>(PrepareAsyncStoreMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::Message>> GetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::Message>>(GetMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Message>> AsyncGetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Message>>(AsyncGetMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Message>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::Message>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Define your RPC methods here.
      virtual void InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UserExists(::grpc::ClientContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserExists(::grpc::ClientContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StoreMessage(::grpc::ClientContext* context, const ::Message* request, ::StoreMessageResponce* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StoreMessage(::grpc::ClientContext* context, const ::Message* request, ::StoreMessageResponce* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset* request, ::grpc::ClientReadReactor< ::Message>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InsertUserResponse>* AsyncInsertUserRaw(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::InsertUserResponse>* PrepareAsyncInsertUserRaw(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserExistsResponse>* AsyncUserExistsRaw(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::UserExistsResponse>* PrepareAsyncUserExistsRaw(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StoreMessageResponce>* AsyncStoreMessageRaw(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::StoreMessageResponce>* PrepareAsyncStoreMessageRaw(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::Message>* GetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Message>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::Message>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::InsertUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InsertUserResponse>> AsyncInsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InsertUserResponse>>(AsyncInsertUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InsertUserResponse>> PrepareAsyncInsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::InsertUserResponse>>(PrepareAsyncInsertUserRaw(context, request, cq));
    }
    ::grpc::Status UserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::UserExistsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserExistsResponse>> AsyncUserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserExistsResponse>>(AsyncUserExistsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserExistsResponse>> PrepareAsyncUserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::UserExistsResponse>>(PrepareAsyncUserExistsRaw(context, request, cq));
    }
    ::grpc::Status StoreMessage(::grpc::ClientContext* context, const ::Message& request, ::StoreMessageResponce* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StoreMessageResponce>> AsyncStoreMessage(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StoreMessageResponce>>(AsyncStoreMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StoreMessageResponce>> PrepareAsyncStoreMessage(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::StoreMessageResponce>>(PrepareAsyncStoreMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::Message>> GetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::Message>>(GetMessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Message>> AsyncGetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Message>>(AsyncGetMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::Message>> PrepareAsyncGetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::Message>>(PrepareAsyncGetMessagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response, std::function<void(::grpc::Status)>) override;
      void InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UserExists(::grpc::ClientContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response, std::function<void(::grpc::Status)>) override;
      void UserExists(::grpc::ClientContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StoreMessage(::grpc::ClientContext* context, const ::Message* request, ::StoreMessageResponce* response, std::function<void(::grpc::Status)>) override;
      void StoreMessage(::grpc::ClientContext* context, const ::Message* request, ::StoreMessageResponce* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset* request, ::grpc::ClientReadReactor< ::Message>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::InsertUserResponse>* AsyncInsertUserRaw(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::InsertUserResponse>* PrepareAsyncInsertUserRaw(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserExistsResponse>* AsyncUserExistsRaw(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::UserExistsResponse>* PrepareAsyncUserExistsRaw(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StoreMessageResponce>* AsyncStoreMessageRaw(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::StoreMessageResponce>* PrepareAsyncStoreMessageRaw(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::Message>* GetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request) override;
    ::grpc::ClientAsyncReader< ::Message>* AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::Message>* PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InsertUser_;
    const ::grpc::internal::RpcMethod rpcmethod_UserExists_;
    const ::grpc::internal::RpcMethod rpcmethod_StoreMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Define your RPC methods here.
    virtual ::grpc::Status InsertUser(::grpc::ServerContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response);
    virtual ::grpc::Status UserExists(::grpc::ServerContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response);
    virtual ::grpc::Status StoreMessage(::grpc::ServerContext* context, const ::Message* request, ::StoreMessageResponce* response);
    virtual ::grpc::Status GetMessages(::grpc::ServerContext* context, const ::GetMessagesRequset* request, ::grpc::ServerWriter< ::Message>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_InsertUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InsertUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InsertUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertUser(::grpc::ServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertUser(::grpc::ServerContext* context, ::InsertUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::InsertUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UserExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserExists() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UserExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserExists(::grpc::ServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserExists(::grpc::ServerContext* context, ::UserExistsRequest* request, ::grpc::ServerAsyncResponseWriter< ::UserExistsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StoreMessage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StoreMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreMessage(::grpc::ServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreMessage(::grpc::ServerContext* context, ::Message* request, ::grpc::ServerAsyncResponseWriter< ::StoreMessageResponce>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMessages() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::GetMessagesRequset* /*request*/, ::grpc::ServerWriter< ::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::GetMessagesRequset* request, ::grpc::ServerAsyncWriter< ::Message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InsertUser<WithAsyncMethod_UserExists<WithAsyncMethod_StoreMessage<WithAsyncMethod_GetMessages<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_InsertUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InsertUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::InsertUserRequest, ::InsertUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response) { return this->InsertUser(context, request, response); }));}
    void SetMessageAllocatorFor_InsertUser(
        ::grpc::MessageAllocator< ::InsertUserRequest, ::InsertUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::InsertUserRequest, ::InsertUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InsertUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertUser(::grpc::ServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertUser(
      ::grpc::CallbackServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UserExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserExists() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::UserExistsRequest, ::UserExistsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response) { return this->UserExists(context, request, response); }));}
    void SetMessageAllocatorFor_UserExists(
        ::grpc::MessageAllocator< ::UserExistsRequest, ::UserExistsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::UserExistsRequest, ::UserExistsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserExists(::grpc::ServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserExists(
      ::grpc::CallbackServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StoreMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StoreMessage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::Message, ::StoreMessageResponce>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::Message* request, ::StoreMessageResponce* response) { return this->StoreMessage(context, request, response); }));}
    void SetMessageAllocatorFor_StoreMessage(
        ::grpc::MessageAllocator< ::Message, ::StoreMessageResponce>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::Message, ::StoreMessageResponce>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StoreMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreMessage(::grpc::ServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMessages() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::GetMessagesRequset, ::Message>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetMessagesRequset* request) { return this->GetMessages(context, request); }));
    }
    ~WithCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::GetMessagesRequset* /*request*/, ::grpc::ServerWriter< ::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::Message>* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::GetMessagesRequset* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_InsertUser<WithCallbackMethod_UserExists<WithCallbackMethod_StoreMessage<WithCallbackMethod_GetMessages<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_InsertUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InsertUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InsertUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertUser(::grpc::ServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UserExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserExists() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UserExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserExists(::grpc::ServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StoreMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StoreMessage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StoreMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreMessage(::grpc::ServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMessages() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::GetMessagesRequset* /*request*/, ::grpc::ServerWriter< ::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_InsertUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InsertUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_InsertUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertUser(::grpc::ServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsertUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserExists() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UserExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserExists(::grpc::ServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserExists(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StoreMessage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StoreMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreMessage(::grpc::ServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMessages() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::GetMessagesRequset* /*request*/, ::grpc::ServerWriter< ::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InsertUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InsertUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InsertUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_InsertUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InsertUser(::grpc::ServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InsertUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserExists() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserExists(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserExists(::grpc::ServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserExists(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StoreMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StoreMessage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StoreMessage(context, request, response); }));
    }
    ~WithRawCallbackMethod_StoreMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreMessage(::grpc::ServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StoreMessage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMessages() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->GetMessages(context, request); }));
    }
    ~WithRawCallbackMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::GetMessagesRequset* /*request*/, ::grpc::ServerWriter< ::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetMessages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InsertUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InsertUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::InsertUserRequest, ::InsertUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::InsertUserRequest, ::InsertUserResponse>* streamer) {
                       return this->StreamedInsertUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InsertUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InsertUser(::grpc::ServerContext* /*context*/, const ::InsertUserRequest* /*request*/, ::InsertUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsertUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::InsertUserRequest,::InsertUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserExists : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserExists() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::UserExistsRequest, ::UserExistsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::UserExistsRequest, ::UserExistsResponse>* streamer) {
                       return this->StreamedUserExists(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserExists() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserExists(::grpc::ServerContext* /*context*/, const ::UserExistsRequest* /*request*/, ::UserExistsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserExists(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::UserExistsRequest,::UserExistsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StoreMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StoreMessage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::Message, ::StoreMessageResponce>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::Message, ::StoreMessageResponce>* streamer) {
                       return this->StreamedStoreMessage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StoreMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StoreMessage(::grpc::ServerContext* /*context*/, const ::Message* /*request*/, ::StoreMessageResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStoreMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Message,::StoreMessageResponce>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InsertUser<WithStreamedUnaryMethod_UserExists<WithStreamedUnaryMethod_StoreMessage<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetMessages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetMessages() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::GetMessagesRequset, ::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::GetMessagesRequset, ::Message>* streamer) {
                       return this->StreamedGetMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetMessages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessages(::grpc::ServerContext* /*context*/, const ::GetMessagesRequset* /*request*/, ::grpc::ServerWriter< ::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::GetMessagesRequset,::Message>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetMessages<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_InsertUser<WithStreamedUnaryMethod_UserExists<WithStreamedUnaryMethod_StoreMessage<WithSplitStreamingMethod_GetMessages<Service > > > > StreamedService;
};


#endif  // GRPC_DatabaseHandler_2eproto__INCLUDED
