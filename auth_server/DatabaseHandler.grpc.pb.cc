// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: DatabaseHandler.proto

#include "DatabaseHandler.pb.h"
#include "DatabaseHandler.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* Database_method_names[] = {
  "/Database/InsertUser",
  "/Database/UserExists",
  "/Database/StoreMessage",
  "/Database/GetMessages",
};

std::unique_ptr< Database::Stub> Database::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Database::Stub> stub(new Database::Stub(channel, options));
  return stub;
}

Database::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_InsertUser_(Database_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserExists_(Database_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StoreMessage_(Database_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMessages_(Database_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Database::Stub::InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::InsertUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::InsertUserRequest, ::InsertUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InsertUser_, context, request, response);
}

void Database::Stub::async::InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::InsertUserRequest, ::InsertUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertUser_, context, request, response, std::move(f));
}

void Database::Stub::async::InsertUser(::grpc::ClientContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InsertUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::InsertUserResponse>* Database::Stub::PrepareAsyncInsertUserRaw(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::InsertUserResponse, ::InsertUserRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InsertUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::InsertUserResponse>* Database::Stub::AsyncInsertUserRaw(::grpc::ClientContext* context, const ::InsertUserRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInsertUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::UserExists(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::UserExistsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UserExistsRequest, ::UserExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserExists_, context, request, response);
}

void Database::Stub::async::UserExists(::grpc::ClientContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UserExistsRequest, ::UserExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserExists_, context, request, response, std::move(f));
}

void Database::Stub::async::UserExists(::grpc::ClientContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserExists_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UserExistsResponse>* Database::Stub::PrepareAsyncUserExistsRaw(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UserExistsResponse, ::UserExistsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserExists_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UserExistsResponse>* Database::Stub::AsyncUserExistsRaw(::grpc::ClientContext* context, const ::UserExistsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserExistsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Database::Stub::StoreMessage(::grpc::ClientContext* context, const ::Message& request, ::StoreMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Message, ::StoreMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StoreMessage_, context, request, response);
}

void Database::Stub::async::StoreMessage(::grpc::ClientContext* context, const ::Message* request, ::StoreMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Message, ::StoreMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreMessage_, context, request, response, std::move(f));
}

void Database::Stub::async::StoreMessage(::grpc::ClientContext* context, const ::Message* request, ::StoreMessageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StoreMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::StoreMessageResponse>* Database::Stub::PrepareAsyncStoreMessageRaw(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::StoreMessageResponse, ::Message, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StoreMessage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::StoreMessageResponse>* Database::Stub::AsyncStoreMessageRaw(::grpc::ClientContext* context, const ::Message& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStoreMessageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::Message>* Database::Stub::GetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request) {
  return ::grpc::internal::ClientReaderFactory< ::Message>::Create(channel_.get(), rpcmethod_GetMessages_, context, request);
}

void Database::Stub::async::GetMessages(::grpc::ClientContext* context, const ::GetMessagesRequset* request, ::grpc::ClientReadReactor< ::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_GetMessages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Message>* Database::Stub::AsyncGetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Message>::Create(channel_.get(), cq, rpcmethod_GetMessages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Message>* Database::Stub::PrepareAsyncGetMessagesRaw(::grpc::ClientContext* context, const ::GetMessagesRequset& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::Message>::Create(channel_.get(), cq, rpcmethod_GetMessages_, context, request, false, nullptr);
}

Database::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::InsertUserRequest, ::InsertUserResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::InsertUserRequest* req,
             ::InsertUserResponse* resp) {
               return service->InsertUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::UserExistsRequest, ::UserExistsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UserExistsRequest* req,
             ::UserExistsResponse* resp) {
               return service->UserExists(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Database::Service, ::Message, ::StoreMessageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Message* req,
             ::StoreMessageResponse* resp) {
               return service->StoreMessage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Database_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Database::Service, ::GetMessagesRequset, ::Message>(
          [](Database::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetMessagesRequset* req,
             ::grpc::ServerWriter<::Message>* writer) {
               return service->GetMessages(ctx, req, writer);
             }, this)));
}

Database::Service::~Service() {
}

::grpc::Status Database::Service::InsertUser(::grpc::ServerContext* context, const ::InsertUserRequest* request, ::InsertUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::UserExists(::grpc::ServerContext* context, const ::UserExistsRequest* request, ::UserExistsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::StoreMessage(::grpc::ServerContext* context, const ::Message* request, ::StoreMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Database::Service::GetMessages(::grpc::ServerContext* context, const ::GetMessagesRequset* request, ::grpc::ServerWriter< ::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


