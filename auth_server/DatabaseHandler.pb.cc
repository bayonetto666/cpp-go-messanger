// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatabaseHandler.proto

#include "DatabaseHandler.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR InsertUserRequest::InsertUserRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.salt_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertUserRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertUserRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertUserRequestDefaultTypeInternal() {}
  union {
    InsertUserRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertUserRequestDefaultTypeInternal _InsertUserRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR InsertUserResponse::InsertUserResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.success_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertUserResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertUserResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertUserResponseDefaultTypeInternal() {}
  union {
    InsertUserResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertUserResponseDefaultTypeInternal _InsertUserResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR StoreMessageResponse::StoreMessageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.success_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreMessageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreMessageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreMessageResponseDefaultTypeInternal() {}
  union {
    StoreMessageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreMessageResponseDefaultTypeInternal _StoreMessageResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.recipient_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.text_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetMessagesRequest::GetMessagesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMessagesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMessagesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMessagesRequestDefaultTypeInternal() {}
  union {
    GetMessagesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMessagesRequestDefaultTypeInternal _GetMessagesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UserExistsRequest::UserExistsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserExistsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserExistsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserExistsRequestDefaultTypeInternal() {}
  union {
    UserExistsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserExistsRequestDefaultTypeInternal _UserExistsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UserExistsResponse::UserExistsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exists_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserExistsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserExistsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserExistsResponseDefaultTypeInternal() {}
  union {
    UserExistsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserExistsResponseDefaultTypeInternal _UserExistsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetPasswordRequest::GetPasswordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPasswordRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPasswordRequestDefaultTypeInternal() {}
  union {
    GetPasswordRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPasswordRequestDefaultTypeInternal _GetPasswordRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetPasswordResponse::GetPasswordResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hashed_password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.salt_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPasswordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPasswordResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPasswordResponseDefaultTypeInternal() {}
  union {
    GetPasswordResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPasswordResponseDefaultTypeInternal _GetPasswordResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_DatabaseHandler_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_DatabaseHandler_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_DatabaseHandler_2eproto = nullptr;
const ::uint32_t TableStruct_DatabaseHandler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::InsertUserRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::InsertUserRequest, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::InsertUserRequest, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::InsertUserRequest, _impl_.salt_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::InsertUserResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::InsertUserResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::InsertUserResponse, _impl_.error_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::StoreMessageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::StoreMessageResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::StoreMessageResponse, _impl_.error_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.recipient_),
    PROTOBUF_FIELD_OFFSET(::Message, _impl_.text_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetMessagesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetMessagesRequest, _impl_.user_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::UserExistsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UserExistsRequest, _impl_.user_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::UserExistsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UserExistsResponse, _impl_.exists_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetPasswordRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetPasswordRequest, _impl_.username_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::GetPasswordResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetPasswordResponse, _impl_.hashed_password_),
    PROTOBUF_FIELD_OFFSET(::GetPasswordResponse, _impl_.salt_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::InsertUserRequest)},
        { 11, -1, -1, sizeof(::InsertUserResponse)},
        { 21, -1, -1, sizeof(::StoreMessageResponse)},
        { 31, -1, -1, sizeof(::Message)},
        { 42, -1, -1, sizeof(::GetMessagesRequest)},
        { 51, -1, -1, sizeof(::UserExistsRequest)},
        { 60, -1, -1, sizeof(::UserExistsResponse)},
        { 69, -1, -1, sizeof(::GetPasswordRequest)},
        { 78, -1, -1, sizeof(::GetPasswordResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_InsertUserRequest_default_instance_._instance,
    &::_InsertUserResponse_default_instance_._instance,
    &::_StoreMessageResponse_default_instance_._instance,
    &::_Message_default_instance_._instance,
    &::_GetMessagesRequest_default_instance_._instance,
    &::_UserExistsRequest_default_instance_._instance,
    &::_UserExistsResponse_default_instance_._instance,
    &::_GetPasswordRequest_default_instance_._instance,
    &::_GetPasswordResponse_default_instance_._instance,
};
const char descriptor_table_protodef_DatabaseHandler_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025DatabaseHandler.proto\"E\n\021InsertUserReq"
    "uest\022\020\n\010username\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
    "\022\014\n\004salt\030\003 \001(\t\"4\n\022InsertUserResponse\022\017\n\007"
    "success\030\001 \001(\010\022\r\n\005error\030\002 \001(\t\"6\n\024StoreMes"
    "sageResponse\022\017\n\007success\030\001 \001(\010\022\r\n\005error\030\002"
    " \001(\t\":\n\007Message\022\016\n\006sender\030\001 \001(\t\022\021\n\trecip"
    "ient\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\"\"\n\022GetMessagesR"
    "equest\022\014\n\004user\030\001 \001(\t\"!\n\021UserExistsReques"
    "t\022\014\n\004user\030\001 \001(\t\"$\n\022UserExistsResponse\022\016\n"
    "\006exists\030\001 \001(\010\"&\n\022GetPasswordRequest\022\020\n\010u"
    "sername\030\001 \001(\t\"<\n\023GetPasswordResponse\022\027\n\017"
    "hashed_password\030\001 \001(\t\022\014\n\004salt\030\002 \001(\t2\235\002\n\010"
    "Database\0227\n\nInsertUser\022\022.InsertUserReque"
    "st\032\023.InsertUserResponse\"\000\0227\n\nUserExists\022"
    "\022.UserExistsRequest\032\023.UserExistsResponse"
    "\"\000\0221\n\014StoreMessage\022\010.Message\032\025.StoreMess"
    "ageResponse\"\000\0220\n\013GetMessages\022\023.GetMessag"
    "esRequest\032\010.Message\"\0000\001\022:\n\013GetPassword\022\023"
    ".GetPasswordRequest\032\024.GetPasswordRespons"
    "e\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_DatabaseHandler_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_DatabaseHandler_2eproto = {
    false,
    false,
    771,
    descriptor_table_protodef_DatabaseHandler_2eproto,
    "DatabaseHandler.proto",
    &descriptor_table_DatabaseHandler_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_DatabaseHandler_2eproto::offsets,
    file_level_metadata_DatabaseHandler_2eproto,
    file_level_enum_descriptors_DatabaseHandler_2eproto,
    file_level_service_descriptors_DatabaseHandler_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_DatabaseHandler_2eproto_getter() {
  return &descriptor_table_DatabaseHandler_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_DatabaseHandler_2eproto(&descriptor_table_DatabaseHandler_2eproto);
// ===================================================================

class InsertUserRequest::_Internal {
 public:
};

InsertUserRequest::InsertUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:InsertUserRequest)
}
InsertUserRequest::InsertUserRequest(const InsertUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertUserRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.salt_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:InsertUserRequest)
}

inline void InsertUserRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.username_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.salt_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertUserRequest::~InsertUserRequest() {
  // @@protoc_insertion_point(destructor:InsertUserRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertUserRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  _impl_.salt_.Destroy();
}

void InsertUserRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InsertUserRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertUserRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "InsertUserRequest.username"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "InsertUserRequest.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "InsertUserRequest.salt"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InsertUserRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InsertUserRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "InsertUserRequest.username");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "InsertUserRequest.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string salt = 3;
  if (!this->_internal_salt().empty()) {
    const std::string& _s = this->_internal_salt();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "InsertUserRequest.salt");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InsertUserRequest)
  return target;
}

::size_t InsertUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InsertUserRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // string salt = 3;
  if (!this->_internal_salt().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertUserRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertUserRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertUserRequest::GetClassData() const { return &_class_data_; }


void InsertUserRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertUserRequest*>(&to_msg);
  auto& from = static_cast<const InsertUserRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InsertUserRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertUserRequest::CopyFrom(const InsertUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InsertUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertUserRequest::IsInitialized() const {
  return true;
}

void InsertUserRequest::InternalSwap(InsertUserRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.salt_, lhs_arena,
                                       &other->_impl_.salt_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertUserRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[0]);
}
// ===================================================================

class InsertUserResponse::_Internal {
 public:
};

InsertUserResponse::InsertUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:InsertUserResponse)
}
InsertUserResponse::InsertUserResponse(const InsertUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertUserResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_) {}

    , decltype(_impl_.success_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:InsertUserResponse)
}

inline void InsertUserResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_) {}

    , decltype(_impl_.success_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InsertUserResponse::~InsertUserResponse() {
  // @@protoc_insertion_point(destructor:InsertUserResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertUserResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void InsertUserResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:InsertUserResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertUserResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "InsertUserResponse.error"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InsertUserResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InsertUserResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    const std::string& _s = this->_internal_error();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "InsertUserResponse.error");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InsertUserResponse)
  return target;
}

::size_t InsertUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InsertUserResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertUserResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertUserResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertUserResponse::GetClassData() const { return &_class_data_; }


void InsertUserResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertUserResponse*>(&to_msg);
  auto& from = static_cast<const InsertUserResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:InsertUserResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertUserResponse::CopyFrom(const InsertUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InsertUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertUserResponse::IsInitialized() const {
  return true;
}

void InsertUserResponse::InternalSwap(InsertUserResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, lhs_arena,
                                       &other->_impl_.error_, rhs_arena);

  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertUserResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[1]);
}
// ===================================================================

class StoreMessageResponse::_Internal {
 public:
};

StoreMessageResponse::StoreMessageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:StoreMessageResponse)
}
StoreMessageResponse::StoreMessageResponse(const StoreMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreMessageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_) {}

    , decltype(_impl_.success_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:StoreMessageResponse)
}

inline void StoreMessageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.error_) {}

    , decltype(_impl_.success_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StoreMessageResponse::~StoreMessageResponse() {
  // @@protoc_insertion_point(destructor:StoreMessageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreMessageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void StoreMessageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StoreMessageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreMessageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StoreMessageResponse.error"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StoreMessageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StoreMessageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    const std::string& _s = this->_internal_error();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "StoreMessageResponse.error");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StoreMessageResponse)
  return target;
}

::size_t StoreMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StoreMessageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreMessageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreMessageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreMessageResponse::GetClassData() const { return &_class_data_; }


void StoreMessageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreMessageResponse*>(&to_msg);
  auto& from = static_cast<const StoreMessageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StoreMessageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreMessageResponse::CopyFrom(const StoreMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StoreMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreMessageResponse::IsInitialized() const {
  return true;
}

void StoreMessageResponse::InternalSwap(StoreMessageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_, lhs_arena,
                                       &other->_impl_.error_, rhs_arena);

  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreMessageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[2]);
}
// ===================================================================

class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.text_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_recipient().empty()) {
    _this->_impl_.recipient_.Set(from._internal_recipient(), _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sender_) {}

    , decltype(_impl_.recipient_) {}

    , decltype(_impl_.text_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.recipient_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.recipient_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.recipient_.Destroy();
  _impl_.text_.Destroy();
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_.ClearToEmpty();
  _impl_.recipient_.ClearToEmpty();
  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Message.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string recipient = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_recipient();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Message.recipient"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Message.text"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Message.sender");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    const std::string& _s = this->_internal_recipient();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Message.recipient");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "Message.text");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender = 1;
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string recipient = 2;
  if (!this->_internal_recipient().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient());
  }

  // string text = 3;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_recipient().empty()) {
    _this->_internal_set_recipient(from._internal_recipient());
  }
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_, lhs_arena,
                                       &other->_impl_.recipient_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[3]);
}
// ===================================================================

class GetMessagesRequest::_Internal {
 public:
};

GetMessagesRequest::GetMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetMessagesRequest)
}
GetMessagesRequest::GetMessagesRequest(const GetMessagesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetMessagesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetMessagesRequest)
}

inline void GetMessagesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetMessagesRequest::~GetMessagesRequest() {
  // @@protoc_insertion_point(destructor:GetMessagesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMessagesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void GetMessagesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMessagesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetMessagesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMessagesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetMessagesRequest.user"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetMessagesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetMessagesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    const std::string& _s = this->_internal_user();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GetMessagesRequest.user");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetMessagesRequest)
  return target;
}

::size_t GetMessagesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetMessagesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetMessagesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetMessagesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetMessagesRequest::GetClassData() const { return &_class_data_; }


void GetMessagesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetMessagesRequest*>(&to_msg);
  auto& from = static_cast<const GetMessagesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetMessagesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetMessagesRequest::CopyFrom(const GetMessagesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetMessagesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMessagesRequest::IsInitialized() const {
  return true;
}

void GetMessagesRequest::InternalSwap(GetMessagesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, lhs_arena,
                                       &other->_impl_.user_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMessagesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[4]);
}
// ===================================================================

class UserExistsRequest::_Internal {
 public:
};

UserExistsRequest::UserExistsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserExistsRequest)
}
UserExistsRequest::UserExistsRequest(const UserExistsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UserExistsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user().empty()) {
    _this->_impl_.user_.Set(from._internal_user(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:UserExistsRequest)
}

inline void UserExistsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.user_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UserExistsRequest::~UserExistsRequest() {
  // @@protoc_insertion_point(destructor:UserExistsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserExistsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.Destroy();
}

void UserExistsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserExistsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UserExistsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserExistsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "UserExistsRequest.user"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserExistsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserExistsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    const std::string& _s = this->_internal_user();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "UserExistsRequest.user");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserExistsRequest)
  return target;
}

::size_t UserExistsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserExistsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user = 1;
  if (!this->_internal_user().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserExistsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserExistsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserExistsRequest::GetClassData() const { return &_class_data_; }


void UserExistsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserExistsRequest*>(&to_msg);
  auto& from = static_cast<const UserExistsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserExistsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserExistsRequest::CopyFrom(const UserExistsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserExistsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExistsRequest::IsInitialized() const {
  return true;
}

void UserExistsRequest::InternalSwap(UserExistsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, lhs_arena,
                                       &other->_impl_.user_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserExistsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[5]);
}
// ===================================================================

class UserExistsResponse::_Internal {
 public:
};

UserExistsResponse::UserExistsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UserExistsResponse)
}
UserExistsResponse::UserExistsResponse(const UserExistsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:UserExistsResponse)
}

inline void UserExistsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exists_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserExistsResponse::~UserExistsResponse() {
  // @@protoc_insertion_point(destructor:UserExistsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserExistsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserExistsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserExistsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UserExistsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exists_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserExistsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool exists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserExistsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserExistsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_exists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UserExistsResponse)
  return target;
}

::size_t UserExistsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UserExistsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool exists = 1;
  if (this->_internal_exists() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UserExistsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UserExistsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UserExistsResponse::GetClassData() const { return &_class_data_; }


void UserExistsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UserExistsResponse*>(&to_msg);
  auto& from = static_cast<const UserExistsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UserExistsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exists() != 0) {
    _this->_internal_set_exists(from._internal_exists());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UserExistsResponse::CopyFrom(const UserExistsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UserExistsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserExistsResponse::IsInitialized() const {
  return true;
}

void UserExistsResponse::InternalSwap(UserExistsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.exists_, other->_impl_.exists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserExistsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[6]);
}
// ===================================================================

class GetPasswordRequest::_Internal {
 public:
};

GetPasswordRequest::GetPasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetPasswordRequest)
}
GetPasswordRequest::GetPasswordRequest(const GetPasswordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPasswordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetPasswordRequest)
}

inline void GetPasswordRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.username_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPasswordRequest::~GetPasswordRequest() {
  // @@protoc_insertion_point(destructor:GetPasswordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPasswordRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
}

void GetPasswordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetPasswordRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPasswordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetPasswordRequest.username"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPasswordRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetPasswordRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GetPasswordRequest.username");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetPasswordRequest)
  return target;
}

::size_t GetPasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetPasswordRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPasswordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPasswordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPasswordRequest::GetClassData() const { return &_class_data_; }


void GetPasswordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPasswordRequest*>(&to_msg);
  auto& from = static_cast<const GetPasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetPasswordRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPasswordRequest::CopyFrom(const GetPasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetPasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPasswordRequest::IsInitialized() const {
  return true;
}

void GetPasswordRequest::InternalSwap(GetPasswordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[7]);
}
// ===================================================================

class GetPasswordResponse::_Internal {
 public:
};

GetPasswordResponse::GetPasswordResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetPasswordResponse)
}
GetPasswordResponse::GetPasswordResponse(const GetPasswordResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPasswordResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hashed_password_) {}

    , decltype(_impl_.salt_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hashed_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hashed_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hashed_password().empty()) {
    _this->_impl_.hashed_password_.Set(from._internal_hashed_password(), _this->GetArenaForAllocation());
  }
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_salt().empty()) {
    _this->_impl_.salt_.Set(from._internal_salt(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetPasswordResponse)
}

inline void GetPasswordResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hashed_password_) {}

    , decltype(_impl_.salt_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hashed_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hashed_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPasswordResponse::~GetPasswordResponse() {
  // @@protoc_insertion_point(destructor:GetPasswordResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPasswordResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hashed_password_.Destroy();
  _impl_.salt_.Destroy();
}

void GetPasswordResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetPasswordResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hashed_password_.ClearToEmpty();
  _impl_.salt_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPasswordResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hashed_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hashed_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetPasswordResponse.hashed_password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetPasswordResponse.salt"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPasswordResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetPasswordResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hashed_password = 1;
  if (!this->_internal_hashed_password().empty()) {
    const std::string& _s = this->_internal_hashed_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GetPasswordResponse.hashed_password");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string salt = 2;
  if (!this->_internal_salt().empty()) {
    const std::string& _s = this->_internal_salt();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "GetPasswordResponse.salt");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetPasswordResponse)
  return target;
}

::size_t GetPasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetPasswordResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hashed_password = 1;
  if (!this->_internal_hashed_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_hashed_password());
  }

  // string salt = 2;
  if (!this->_internal_salt().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_salt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPasswordResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPasswordResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPasswordResponse::GetClassData() const { return &_class_data_; }


void GetPasswordResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPasswordResponse*>(&to_msg);
  auto& from = static_cast<const GetPasswordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetPasswordResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hashed_password().empty()) {
    _this->_internal_set_hashed_password(from._internal_hashed_password());
  }
  if (!from._internal_salt().empty()) {
    _this->_internal_set_salt(from._internal_salt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPasswordResponse::CopyFrom(const GetPasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetPasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPasswordResponse::IsInitialized() const {
  return true;
}

void GetPasswordResponse::InternalSwap(GetPasswordResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hashed_password_, lhs_arena,
                                       &other->_impl_.hashed_password_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.salt_, lhs_arena,
                                       &other->_impl_.salt_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPasswordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_DatabaseHandler_2eproto_getter, &descriptor_table_DatabaseHandler_2eproto_once,
      file_level_metadata_DatabaseHandler_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::InsertUserRequest*
Arena::CreateMaybeMessage< ::InsertUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InsertUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::InsertUserResponse*
Arena::CreateMaybeMessage< ::InsertUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::InsertUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::StoreMessageResponse*
Arena::CreateMaybeMessage< ::StoreMessageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StoreMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::Message*
Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::GetMessagesRequest*
Arena::CreateMaybeMessage< ::GetMessagesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetMessagesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserExistsRequest*
Arena::CreateMaybeMessage< ::UserExistsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserExistsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::UserExistsResponse*
Arena::CreateMaybeMessage< ::UserExistsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UserExistsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::GetPasswordRequest*
Arena::CreateMaybeMessage< ::GetPasswordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetPasswordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetPasswordResponse*
Arena::CreateMaybeMessage< ::GetPasswordResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetPasswordResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
