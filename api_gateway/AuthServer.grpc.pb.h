// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: AuthServer.proto
#ifndef GRPC_AuthServer_2eproto__INCLUDED
#define GRPC_AuthServer_2eproto__INCLUDED

#include "AuthServer.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class Authentication final {
 public:
  static constexpr char const* service_full_name() {
    return "Authentication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status authUser(::grpc::ClientContext* context, const ::authUserRequest& request, ::authUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authUserResponse>> AsyncauthUser(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authUserResponse>>(AsyncauthUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authUserResponse>> PrepareAsyncauthUser(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::authUserResponse>>(PrepareAsyncauthUserRaw(context, request, cq));
    }
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::registerUserRequest& request, ::registerUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerUserResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerUserResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerUserResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::registerUserResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status getSubject(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::getSubjectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getSubjectResponse>> AsyncgetSubject(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getSubjectResponse>>(AsyncgetSubjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getSubjectResponse>> PrepareAsyncgetSubject(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getSubjectResponse>>(PrepareAsyncgetSubjectRaw(context, request, cq));
    }
    virtual ::grpc::Status verifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::verifyJWTResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::verifyJWTResponse>> AsyncverifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::verifyJWTResponse>>(AsyncverifyJWTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::verifyJWTResponse>> PrepareAsyncverifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::verifyJWTResponse>>(PrepareAsyncverifyJWTRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void authUser(::grpc::ClientContext* context, const ::authUserRequest* request, ::authUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void authUser(::grpc::ClientContext* context, const ::authUserRequest* request, ::authUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::registerUserRequest* request, ::registerUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::registerUserRequest* request, ::registerUserResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getSubject(::grpc::ClientContext* context, const ::getSubjectRequest* request, ::getSubjectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getSubject(::grpc::ClientContext* context, const ::getSubjectRequest* request, ::getSubjectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void verifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest* request, ::verifyJWTResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void verifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest* request, ::verifyJWTResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authUserResponse>* AsyncauthUserRaw(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::authUserResponse>* PrepareAsyncauthUserRaw(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::registerUserResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::registerUserResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::getSubjectResponse>* AsyncgetSubjectRaw(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::getSubjectResponse>* PrepareAsyncgetSubjectRaw(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::verifyJWTResponse>* AsyncverifyJWTRaw(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::verifyJWTResponse>* PrepareAsyncverifyJWTRaw(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status authUser(::grpc::ClientContext* context, const ::authUserRequest& request, ::authUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authUserResponse>> AsyncauthUser(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authUserResponse>>(AsyncauthUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authUserResponse>> PrepareAsyncauthUser(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::authUserResponse>>(PrepareAsyncauthUserRaw(context, request, cq));
    }
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::registerUserRequest& request, ::registerUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerUserResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerUserResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerUserResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::registerUserResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status getSubject(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::getSubjectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getSubjectResponse>> AsyncgetSubject(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getSubjectResponse>>(AsyncgetSubjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getSubjectResponse>> PrepareAsyncgetSubject(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getSubjectResponse>>(PrepareAsyncgetSubjectRaw(context, request, cq));
    }
    ::grpc::Status verifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::verifyJWTResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::verifyJWTResponse>> AsyncverifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::verifyJWTResponse>>(AsyncverifyJWTRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::verifyJWTResponse>> PrepareAsyncverifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::verifyJWTResponse>>(PrepareAsyncverifyJWTRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void authUser(::grpc::ClientContext* context, const ::authUserRequest* request, ::authUserResponse* response, std::function<void(::grpc::Status)>) override;
      void authUser(::grpc::ClientContext* context, const ::authUserRequest* request, ::authUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void registerUser(::grpc::ClientContext* context, const ::registerUserRequest* request, ::registerUserResponse* response, std::function<void(::grpc::Status)>) override;
      void registerUser(::grpc::ClientContext* context, const ::registerUserRequest* request, ::registerUserResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getSubject(::grpc::ClientContext* context, const ::getSubjectRequest* request, ::getSubjectResponse* response, std::function<void(::grpc::Status)>) override;
      void getSubject(::grpc::ClientContext* context, const ::getSubjectRequest* request, ::getSubjectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void verifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest* request, ::verifyJWTResponse* response, std::function<void(::grpc::Status)>) override;
      void verifyJWT(::grpc::ClientContext* context, const ::verifyJWTRequest* request, ::verifyJWTResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::authUserResponse>* AsyncauthUserRaw(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::authUserResponse>* PrepareAsyncauthUserRaw(::grpc::ClientContext* context, const ::authUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::registerUserResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::registerUserResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::registerUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::getSubjectResponse>* AsyncgetSubjectRaw(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::getSubjectResponse>* PrepareAsyncgetSubjectRaw(::grpc::ClientContext* context, const ::getSubjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::verifyJWTResponse>* AsyncverifyJWTRaw(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::verifyJWTResponse>* PrepareAsyncverifyJWTRaw(::grpc::ClientContext* context, const ::verifyJWTRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_authUser_;
    const ::grpc::internal::RpcMethod rpcmethod_registerUser_;
    const ::grpc::internal::RpcMethod rpcmethod_getSubject_;
    const ::grpc::internal::RpcMethod rpcmethod_verifyJWT_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status authUser(::grpc::ServerContext* context, const ::authUserRequest* request, ::authUserResponse* response);
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::registerUserRequest* request, ::registerUserResponse* response);
    virtual ::grpc::Status getSubject(::grpc::ServerContext* context, const ::getSubjectRequest* request, ::getSubjectResponse* response);
    virtual ::grpc::Status verifyJWT(::grpc::ServerContext* context, const ::verifyJWTRequest* request, ::verifyJWTResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_authUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_authUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_authUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authUser(::grpc::ServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestauthUser(::grpc::ServerContext* context, ::authUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::authUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::registerUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::registerUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getSubject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getSubject() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getSubject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSubject(::grpc::ServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSubject(::grpc::ServerContext* context, ::getSubjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::getSubjectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_verifyJWT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_verifyJWT() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_verifyJWT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyJWT(::grpc::ServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestverifyJWT(::grpc::ServerContext* context, ::verifyJWTRequest* request, ::grpc::ServerAsyncResponseWriter< ::verifyJWTResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_authUser<WithAsyncMethod_registerUser<WithAsyncMethod_getSubject<WithAsyncMethod_verifyJWT<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_authUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_authUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::authUserRequest, ::authUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::authUserRequest* request, ::authUserResponse* response) { return this->authUser(context, request, response); }));}
    void SetMessageAllocatorFor_authUser(
        ::grpc::MessageAllocator< ::authUserRequest, ::authUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::authUserRequest, ::authUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_authUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authUser(::grpc::ServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* authUser(
      ::grpc::CallbackServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::registerUserRequest, ::registerUserResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::registerUserRequest* request, ::registerUserResponse* response) { return this->registerUser(context, request, response); }));}
    void SetMessageAllocatorFor_registerUser(
        ::grpc::MessageAllocator< ::registerUserRequest, ::registerUserResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::registerUserRequest, ::registerUserResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getSubject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getSubject() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::getSubjectRequest, ::getSubjectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::getSubjectRequest* request, ::getSubjectResponse* response) { return this->getSubject(context, request, response); }));}
    void SetMessageAllocatorFor_getSubject(
        ::grpc::MessageAllocator< ::getSubjectRequest, ::getSubjectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::getSubjectRequest, ::getSubjectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getSubject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSubject(::grpc::ServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSubject(
      ::grpc::CallbackServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_verifyJWT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_verifyJWT() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::verifyJWTRequest, ::verifyJWTResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::verifyJWTRequest* request, ::verifyJWTResponse* response) { return this->verifyJWT(context, request, response); }));}
    void SetMessageAllocatorFor_verifyJWT(
        ::grpc::MessageAllocator< ::verifyJWTRequest, ::verifyJWTResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::verifyJWTRequest, ::verifyJWTResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_verifyJWT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyJWT(::grpc::ServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* verifyJWT(
      ::grpc::CallbackServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_authUser<WithCallbackMethod_registerUser<WithCallbackMethod_getSubject<WithCallbackMethod_verifyJWT<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_authUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_authUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_authUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authUser(::grpc::ServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getSubject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getSubject() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getSubject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSubject(::grpc::ServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_verifyJWT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_verifyJWT() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_verifyJWT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyJWT(::grpc::ServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_authUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_authUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_authUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authUser(::grpc::ServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestauthUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getSubject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getSubject() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_getSubject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSubject(::grpc::ServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetSubject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_verifyJWT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_verifyJWT() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_verifyJWT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyJWT(::grpc::ServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestverifyJWT(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_authUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_authUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->authUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_authUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status authUser(::grpc::ServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* authUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getSubject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getSubject() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getSubject(context, request, response); }));
    }
    ~WithRawCallbackMethod_getSubject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getSubject(::grpc::ServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getSubject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_verifyJWT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_verifyJWT() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->verifyJWT(context, request, response); }));
    }
    ~WithRawCallbackMethod_verifyJWT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status verifyJWT(::grpc::ServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* verifyJWT(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_authUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_authUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::authUserRequest, ::authUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::authUserRequest, ::authUserResponse>* streamer) {
                       return this->StreamedauthUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_authUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status authUser(::grpc::ServerContext* /*context*/, const ::authUserRequest* /*request*/, ::authUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedauthUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::authUserRequest,::authUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::registerUserRequest, ::registerUserResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::registerUserRequest, ::registerUserResponse>* streamer) {
                       return this->StreamedregisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::registerUserRequest* /*request*/, ::registerUserResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::registerUserRequest,::registerUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getSubject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getSubject() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::getSubjectRequest, ::getSubjectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::getSubjectRequest, ::getSubjectResponse>* streamer) {
                       return this->StreamedgetSubject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getSubject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getSubject(::grpc::ServerContext* /*context*/, const ::getSubjectRequest* /*request*/, ::getSubjectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetSubject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::getSubjectRequest,::getSubjectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_verifyJWT : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_verifyJWT() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::verifyJWTRequest, ::verifyJWTResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::verifyJWTRequest, ::verifyJWTResponse>* streamer) {
                       return this->StreamedverifyJWT(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_verifyJWT() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status verifyJWT(::grpc::ServerContext* /*context*/, const ::verifyJWTRequest* /*request*/, ::verifyJWTResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedverifyJWT(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::verifyJWTRequest,::verifyJWTResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_authUser<WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_getSubject<WithStreamedUnaryMethod_verifyJWT<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_authUser<WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_getSubject<WithStreamedUnaryMethod_verifyJWT<Service > > > > StreamedService;
};


#endif  // GRPC_AuthServer_2eproto__INCLUDED
