// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatServer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ChatServer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ChatServer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ChatServer_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ChatServer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ChatServer_2eproto;
namespace chat {
class RoomResponse;
struct RoomResponseDefaultTypeInternal;
extern RoomResponseDefaultTypeInternal _RoomResponse_default_instance_;
}  // namespace chat
PROTOBUF_NAMESPACE_OPEN
template <>
::chat::RoomResponse* Arena::CreateMaybeMessage<::chat::RoomResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace chat {

// ===================================================================


// -------------------------------------------------------------------

class RoomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chat.RoomResponse) */ {
 public:
  inline RoomResponse() : RoomResponse(nullptr) {}
  ~RoomResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomResponse(const RoomResponse& from);
  RoomResponse(RoomResponse&& from) noexcept
    : RoomResponse() {
    *this = ::std::move(from);
  }

  inline RoomResponse& operator=(const RoomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomResponse& operator=(RoomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomResponse* internal_default_instance() {
    return reinterpret_cast<const RoomResponse*>(
               &_RoomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoomResponse& a, RoomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomResponse& from) {
    RoomResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "chat.RoomResponse";
  }
  protected:
  explicit RoomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string room_id = 1;
  void clear_room_id() ;
  const std::string& room_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* ptr);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // string error = 2;
  void clear_error() ;
  const std::string& error() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error(Arg_&& arg, Args_... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* ptr);

  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(
      const std::string& value);
  std::string* _internal_mutable_error();

  public:
  // @@protoc_insertion_point(class_scope:chat.RoomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ChatServer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RoomResponse

// string room_id = 1;
inline void RoomResponse::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& RoomResponse::room_id() const {
  // @@protoc_insertion_point(field_get:chat.RoomResponse.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomResponse::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.RoomResponse.room_id)
}
inline std::string* RoomResponse::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:chat.RoomResponse.room_id)
  return _s;
}
inline const std::string& RoomResponse::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void RoomResponse::_internal_set_room_id(const std::string& value) {
  ;


  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomResponse::_internal_mutable_room_id() {
  ;
  return _impl_.room_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RoomResponse::release_room_id() {
  // @@protoc_insertion_point(field_release:chat.RoomResponse.room_id)
  return _impl_.room_id_.Release();
}
inline void RoomResponse::set_allocated_room_id(std::string* value) {
  _impl_.room_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.room_id_.IsDefault()) {
          _impl_.room_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.RoomResponse.room_id)
}

// string error = 2;
inline void RoomResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& RoomResponse::error() const {
  // @@protoc_insertion_point(field_get:chat.RoomResponse.error)
  return _internal_error();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomResponse::set_error(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.error_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chat.RoomResponse.error)
}
inline std::string* RoomResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:chat.RoomResponse.error)
  return _s;
}
inline const std::string& RoomResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RoomResponse::_internal_set_error(const std::string& value) {
  ;


  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomResponse::_internal_mutable_error() {
  ;
  return _impl_.error_.Mutable( GetArenaForAllocation());
}
inline std::string* RoomResponse::release_error() {
  // @@protoc_insertion_point(field_release:chat.RoomResponse.error)
  return _impl_.error_.Release();
}
inline void RoomResponse::set_allocated_error(std::string* value) {
  _impl_.error_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_.IsDefault()) {
          _impl_.error_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chat.RoomResponse.error)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chat


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ChatServer_2eproto_2epb_2eh
